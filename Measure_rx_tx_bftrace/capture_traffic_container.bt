#!/usr/bin/bpftrace
BEGIN {
    printf("Tracing network traffic in containers. Ctrl-C to stop\n");
    @start_ns = nsecs;
}

// RX: sock_recvmsg
kprobe:sock_recvmsg
{
    @sock_recvmsg[tid] = arg0;
    @container_info[tid] = sprintf("%s (%d)", comm, pid);
}
kretprobe:sock_recvmsg
{
    if (retval > 0) {
        @recv_bytes[pid, comm] += retval;
        @container_recv_bytes[pid, comm] += retval;
    }
    delete(@sock_recvmsg[tid]);
    delete(@container_info[tid]);
}

// TX: sock_sendmsg
kprobe:sock_sendmsg
{
    @sock_sendmsg[tid] = arg0;
    @container_info[tid] = sprintf("%s (%d)", comm, pid);
}
kretprobe:sock_sendmsg
{
    if (retval > 0) {
        @send_bytes[pid, comm] += retval;
        @container_send_bytes[pid, comm] += retval;
    }
    delete(@sock_sendmsg[tid]);
    delete(@container_info[tid]);
}

interval:ms:10
{
    printf("TIME: %d\n", nsecs - @start_ns);
    printf("RX (Container Traffic):\n");
    print(@container_recv_bytes);
    printf("TX (Container Traffic):\n");
    print(@container_send_bytes);
    printf("---\n");
    clear(@recv_bytes);
    clear(@send_bytes);
    clear(@container_recv_bytes);
    clear(@container_send_bytes);
}

END {
    clear(@recv_bytes);
    clear(@send_bytes);
    clear(@container_recv_bytes);
    clear(@container_send_bytes);
}
